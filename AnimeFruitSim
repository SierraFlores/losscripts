local FruitInv = game:GetService("Players").Louisiana_hotspot.Inventory.DevilFruits:GetChildren()
local FruitInvTable = {}
local SwordInv = game:GetService("Players").Louisiana_hotspot.Inventory.Weapons:GetChildren()
local SwordInvTable = {}
local PetsInv = game:GetService("Players").Louisiana_hotspot.Inventory.Pets:GetChildren()
local PetsInvTable = {}
local EquipInv = game:GetService("Players").Louisiana_hotspot.Inventory.EquippedPets:GetChildren()
local EquipInvTable = {}


for i,v in pairs(FruitInv) do
	table.insert(FruitInvTable, v.Name)
end
for i,v in pairs(SwordInv) do
	table.insert(SwordInvTable, v.Name)
end
for i,v in pairs(PetsInv) do
	table.insert(PetsInvTable, v.Name)
end
for i,v in pairs(EquipInv) do
	table.insert(EquipInvTable, v.Name)
end
local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/lostooraw/losscripts/main/LosScriptUI'))()

local Window = Rayfield:CreateWindow({
	Name = "Anime Fruit Simulator",
	LoadingTitle = "Anime Fruit Simulator",
	LoadingSubtitle = "by Los",
	ConfigurationSaving = {
		Enabled = true,
		FolderName = "Los Config",
		FileName = "Los Configg"
	},
	KeySystem = true, -- Set this to true to use their key system
	KeySettings = {
		Title = "Anime Fruit Simulator",
		Subtitle = "Los's Key System",
		Note = "Join the discord (discord.gg/weV5M4TF)",
		SaveKey = true,
		Key = "ReeceAndTweakAreBad"
	}
})

Rayfield:Notify("Title Example", "Content/Description Example", 4483362458) -- Notfication -- Title, Content, Image

local Tab = Window:CreateTab("AutoFarm", 4483362458) -- Title, Image

local Section = Tab:CreateSection("Auto Farm Mob")

local Slider = Tab:CreateSlider({
	Name = "ZoneToFarm",
	Range = {0, 16},
	Increment = 1,
	Suffix = "",
	CurrentValue = 8,
	Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		-- The function that takes place when the slider changes
    		-- The variable (Value) is a number which correlates to the value the slider is currently at
	end,
})

local Toggle = Tab:CreateToggle({
	Name = "Toggle AutoFarmMob",
	CurrentValue = false,
	Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		-- The function that takes place when the toggle is pressed
    		-- The variable (Value) is a boolean on whether the toggle is true or false
	end,
})

local Section = Tab:CreateSection("Auto Farm Boss")

local Slider = Tab:CreateSlider({
	Name = "ZoneToFarm",
	Range = {0, 16},
	Increment = 1,
	Suffix = "",
	CurrentValue = 8,
	Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		-- The function that takes place when the slider changes
    		-- The variable (Value) is a number which correlates to the value the slider is currently at
	end,
})

local Toggle = Tab:CreateToggle({
	Name = "Toggle AutoFarmBoss",
	CurrentValue = false,
	Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		-- The function that takes place when the toggle is pressed
    		-- The variable (Value) is a boolean on whether the toggle is true or false
	end,
})

local Section = Tab:CreateSection("Auto Farm Rebirths")
local Slider = Tab:CreateSlider({
	Name = "Delay Between Rebirths",
	Range = {0, 15},
	Increment = 1,
	Suffix = "Seconds",
	CurrentValue = 8,
	Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		-- The function that takes place when the slider changes
    		-- The variable (Value) is a number which correlates to the value the slider is currently at
	end,
})
local Toggle = Tab:CreateToggle({
	Name = "Toggle AutoRebirth",
	CurrentValue = false,
	Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		-- The function that takes place when the toggle is pressed
    		-- The variable (Value) is a boolean on whether the toggle is true or false
	end,
})
local Section = Tab:CreateSection("Auto Advance To Certain Zone")
local Slider = Tab:CreateSlider({
	Name = "Max Zone To Advance To",
	Range = {0, 16},
	Increment = 1,
	Suffix = "",
	CurrentValue = 8,
	Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		-- The function that takes place when the slider changes
    		-- The variable (Value) is a number which correlates to the value the slider is currently at
	end,
})
local Toggle = Tab:CreateToggle({
	Name = "Toggle AutoAdvance",
	CurrentValue = false,
	Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		-- The function that takes place when the toggle is pressed
    		-- The variable (Value) is a boolean on whether the toggle is true or false
	end,
})
 










local Dupe = Window:CreateTab("Duplicate Items", 4483362458) -- Title, Image
local Section = Dupe:CreateSection("PetDupe (Enequip To Work)")
local PetsDupe;
local PetsAmmount;
Dupe:CreateSlider({
	Name = "Ammount To Dupe",
	Range = {1, 100},
	Increment = 1,
	Suffix = "Items",
	CurrentValue = 1,
	Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		PetsAmmount = Value
		print(Value)
	end,
})
Dupe:CreateDropdown({
    Name = "Choose Pet To Dupe",
    Options = PetsInvTable,
    CurrentOption = "Option 1",
    Flag = "Dropdown1",
    Callback = function(Option)
        for i,v in pairs(PetsInv) do
            if v.Name == Option then
				PetsDupe = v
				print(Option)
            end
        end
    end
})
Dupe:CreateButton({
    Name = "Dupe Pets",
    Callback = function()
    	local count = PetsAmmount
    	while true do	
			print(PetsDupe)
			local Clone = PetsDupe:Clone()
			Clone.Parent = game:GetService("Players").Louisiana_hotspot.Inventory.Pets
			count = count -1 if count == 0 then
				break
			end
		end
    end,
})












local Section = Dupe:CreateSection("WeaponDupe")
local SwordDupe;
local SwordAmmount;
Dupe:CreateSlider({
	Name = "Ammount To Dupe",
	Range = {1, 100},
	Increment = 1,
	Suffix = "Items",
	CurrentValue = 1,
	Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		SwordAmmount = Value
		print(Value)
	end,
})
Dupe:CreateDropdown({
    Name = "Choose Sword To Dupe",
    Options = SwordInvTable,
    CurrentOption = "Option 1",
    Flag = "Dropdown1",
    Callback = function(Option)
        for i,v in pairs(SwordInv) do
            if v.Name == Option then
				SwordDupe = v
				print(Option)
            end
        end
    end
})
Dupe:CreateButton({
    Name = "Dupe Weapons",
    Callback = function()
    	local count = SwordAmmount
    	while true do	
			print(SwordDupe)
			local Clone = SwordDupe:Clone()
			Clone.Parent = game:GetService("Players").Louisiana_hotspot.Inventory.Weapons
			count = count -1 if count == 0 then
				break
			end
		end
    end,
})











local Section = Dupe:CreateSection("FruitDupe")
local FruitDupe;
local FruitAmmount;
Dupe:CreateSlider({
	Name = "Ammount To Dupe",
	Range = {1, 100},
	Increment = 1,
	Suffix = "Items",
	CurrentValue = 1,
	Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		FruitAmmount = Value
		print(Value)
	end,
})
Dupe:CreateDropdown({
    Name = "Choose Fruit To Dupe",
    Options = FruitInvTable,
    CurrentOption = "Option 1",
    Flag = "Dropdown1",
    Callback = function(Option)
        for i,v in pairs(FruitInv) do
            if v.Name == Option then
				FruitDupe = v
				print(Option)
            end
        end
    end
})
Dupe:CreateButton({
    Name = "Dupe Fruits",
    Callback = function()
    	local count = FruitAmmount
    	while true do	
			print(FruitDupe)
			local Clone = FruitDupe:Clone()
			Clone.Parent = game:GetService("Players").Louisiana_hotspot.Inventory.DevilFruits
			count = count -1 if count == 0 then
				break
			end
		end
    end,
})









local Dupe2 = Window:CreateTab("InfinitePetsEquipped", 4483362458) -- Title, Image
local Section = Dupe2:CreateSection("InfinitePetsEquipped (Have Atleast 1 Pet Equipped)")
local EquipDupe;
local EquipAmmount;
Dupe2:CreateSlider({
	Name = "Ammount To Equip",
	Range = {1, 100},
	Increment = 1,
	Suffix = "Pets",
	CurrentValue = 1,
	Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		EquipAmmount = Value
		print(Value)
	end,
})
Dupe2:CreateDropdown({
    Name = "Choose Pet To Have Equip",
    Options = EquipInvTable,
    CurrentOption = "Option 1",
    Flag = "Dropdown1",
    Callback = function(Option)
        for i,v in pairs(EquipInv) do
            if v.Name == Option then
				EquipDupe = v
				print(Option)
            end
        end
    end
})
Dupe2:CreateButton({
    Name = "Equip Pets (unequip all the equip best after clicking)",
    Callback = function()
    	local count = EquipAmmount
    	while true do	
			print(EquipDupe)
			local Clone = EquipDupe:Clone()
			Clone.Parent = game:GetService("Players").Louisiana_hotspot.Inventory.EquippedPets
			count = count -1 if count == 0 then
				break
			end
		end
    end,
})

